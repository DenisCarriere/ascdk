#!/usr/bin/env node

const tailArgs = process.argv.indexOf("--");
if (~tailArgs) {
    require("child_process").spawnSync(
        process.argv[0],
        process.argv.slice(tailArgs + 1).concat(
            process.argv.slice(1, tailArgs)
        ),
        { stdio: "inherit" }
    );
    return;
}

try { require("source-map-support").install(); } catch (e) { }

const asc = module.exports = require("ask-transform/src/asc/asc.js");
// const asc = module.exports = require("assemblyscript/cli/asc.js");
const path = require("path");
const ARGS = [
    "--importMemory",
    "--initialMemory",
    "2",
    "--maximumMemory",
    "16",
    "--noExportMemory",
    "--runtime",
    "--use",
    "abort= ",
    "-O2",
    "--transform",
    "ask-transform/index.ts"
]

if (/\bask$/.test(process.argv[1])) {
    console.log("Building Start 路路路路")
    asc.ready.then(() => {
        let args = process.argv.slice(2).concat(ARGS);
        process.exitCode = asc.main(args);
        asc.ready.then(()=> {
            args.pop(), args.pop();
            let sourcePath = process.argv[2];
            if (sourcePath) {
                console.log("Building Inprogress. Generating wasm file.")
                let dirname = path.dirname(sourcePath);
                let wasmPath = path.join(dirname, "target", "target.wasm");
                let wastPath = path.join(dirname, "target", "target.wast");
                args.push("-b", wasmPath)
                args.push("-t", wastPath)
                const ascOption = require("ask-transform/src/ascOption.js");
                let apiOption = new ascOption.APIOptionImpl();
                asc.main(args, apiOption);
                apiOption.writeExtensionFile();
                console.log("Build Done. Targets generated");
            }
        });
        return process.exitCode
    });
}


